-> Steps for solving Binary Search Problem

Step 1 - Find the mid index of the arrar using the formula :- 
         mid = start + (end - start)/2;            //where start = 0, and end = size of arr - 1

Step 2 - Create a while loop start from (start <= end)
         while(start <= end){
         . 
         .//write your code hear
         .
         }

Step 3 - Agar mid value key value ke barabar hai to return kar do mid value.
         if(arr[mid] == key) {
             return mid;
         }

Step 4 - Agar key value mid value se large hai to start index ko shift kar do (mid + 1) index se.
         if(key > arr[mid]) {
             start = mid + 1;
         }

Step 5 - Agar key value mid value se small hai to end index ko shift kar do (mid - 1) index se.
         else {
             end = mid - 1;
         }

Step 6 - Ab mid ko update kar do new start or end index se. Using this formula :-
         mid = start + (end - start)/2;

NOTE :- STEP 3, STEP 4, STEP 5 WHILE LOOP KE ANDAR KARNA HAI STEP 2 KE.

-> Sample code

#include<iostream>
using namespace std;

int binarySearch(int arr[], int size, int key){
    int start = 0;
    int end = size - 1;

    int mid = start + (end - start)/2;

    while (start <= end)
    {
        if(arr[mid] == key) {
            return mid;
        }
        if(key > arr[mid]) {
            start = mid + 1;
        }
        else {
            end = mid - 1;
        }

        mid = start + (end - start)/2;
    }
    return -1;
}

int main()
{
    int even[8] = {2,4,6,8,10,12,14,16};
    int odd[7] = {1,3,5,7,9,11,13};

    int evenIndex = binarySearch(even, 8, 14);
    cout << "Index of 14 is " << evenIndex << endl;

    int oddIndex = binarySearch(odd, 7, 3);
    cout << "Index of 3 is " << oddIndex << endl;

    return 0;
}

